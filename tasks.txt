That's a job well done!

  |=====                                             |   9%
| Let's simulate rolling four six-sided dice: sample(1:6,
| 4, replace = TRUE).

> sample(1:6, 4, replace = TRUE)
[1] 4 1 2 4

| That's correct!

  |======                                            |  12%
| Now repeat the command to see how your result differs.
| (The probability of rolling the exact same result is
| (1/6)^4 = 0.00077, which is pretty small!)

> sample(1:6, 4, replace = TRUE)
[1] 1 6 6 6

| Your dedication is inspiring!

  |========                                          |  15%
| sample(1:6, 4, replace = TRUE) instructs R to randomly
| select four numbers between 1 and 6, WITH replacement.
| Sampling with replacement simply means that each number
| is "replaced" after it is selected, so that the same
| number can show up more than once. This is what we want
| here, since what you roll on one die shouldn't affect
| what you roll on any of the others.

...

  |=========                                         |  18%
| Now sample 10 numbers between 1 and 20, WITHOUT
| replacement. To sample without replacement, simply leave
| off the 'replace' argument.

> sample(1:10)
 [1]  9 10  7  1  6  5  4  3  8  2

| One more time. You can do it! Or, type info() for more
| options.

| Type sample(1:20, 10) to sample 10 numbers between 1 and
| 20, without replacement.

> sample(1:20, 10)
 [1] 16 12 10  2 18  1 15 19  4  5

| Perseverance, that's the answer.

  |===========                                       |  21%
| Since the last command sampled without replacement, no
| number appears more than once in the output.

...

  |============                                      |  24%
| LETTERS is a predefined variable in R containing a vector
| of all 26 letters of the English alphabet. Take a look at
| it now.

> sample(LETTERS)
 [1] "G" "Z" "K" "R" "I" "T" "B" "E" "X" "U" "D" "W" "C" "F"
[15] "V" "Y" "S" "J" "N" "H" "A" "M" "Q" "L" "O" "P"

| One more time. You can do it! Or, type info() for more
| options.

| Type LETTERS to print its contents to the console.

> LETTERS
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N"
[15] "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z"

| You are really on a roll!

  |==============                                    |  27%
| The sample() function can also be used to permute, or
| rearrange, the elements of a vector. For example, try
| sample(LETTERS) to permute all 26 letters of the English
| alphabet.

> sample(LETTERS)
 [1] "H" "B" "D" "F" "Q" "I" "M" "N" "U" "K" "W" "Z" "C" "S"
[15] "T" "A" "X" "J" "E" "R" "V" "O" "Y" "P" "G" "L"

| Keep working like that and you'll get there!

  |===============                                   |  30%
| This is identical to taking a sample of size 26 from
| LETTERS, without replacement. When the 'size' argument to
| sample() is not specified, R takes a sample equal in size
| to the vector from which you are sampling.

...

  |=================                                 |  33%
| Now, suppose we want to simulate 100 flips of an unfair
| two-sided coin. This particular coin has a 0.3
| probability of landing 'tails' and a 0.7 probability of
| landing 'heads'.

...

  |==================                                |  36%
| Let the value 0 represent tails and the value 1 represent
| heads. Use sample() to draw a sample of size 100 from the
| vector c(0,1), with replacement. Since the coin is
| unfair, we must attach specific probabilities to the
| values 0 (tails) and 1 (heads) with a fourth argument,
| prob = c(0.3, 0.7). Assign the result to a new variable
| called flips.

> flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))

| Great job!

  |====================                              |  39%
| View the contents of the flips variable.

> 
> flips
  [1] 1 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1
 [28] 1 1 1 0 1 1 1 1 0 1 1 0 0 1 1 0 0 1 1 1 0 0 1 1 1 0 0
 [55] 1 1 1 1 0 1 1 1 1 0 1 1 1 0 0 1 0 1 1 1 1 1 1 0 0 1 1
 [82] 0 1 0 1 1 1 1 1 0 0 1 0 0 0 1 1 0 1 0

| You are quite good my friend!

  |=====================                             |  42%
| Since we set the probability of landing heads on any
| given flip to be 0.7, we'd expect approximately 70 of our
| coin flips to have the value 1. Count the actual number
| of 1s contained in flips using the sum() function.

> sum(flips)
[1] 65

| That's a job well done!

  |=======================                           |  45%
| A coin flip is a binary outcome (0 or 1) and we are
| performing 100 independent trials (coin flips), so we can
| use rbinom() to simulate a binomial random variable. Pull
| up the documentation for rbinom() using ?rbinom.

> ?rbinom

| Great job!

  |========================                          |  48%
| Each probability distribution in R has an r*** function
| (for "random"), a d*** function (for "density"), a p***
| (for "probability"), and q*** (for "quantile"). We are
| most interested in the r*** functions in this lesson, but
| I encourage you to explore the others on your own.

...

  |==========================                        |  52%
| A binomial random variable represents the number of
| 'successes' (heads) in a given number of independent
| 'trials' (coin flips). Therefore, we can generate a
| single random variable that represents the number of
| heads in 100 flips of our unfair coin using rbinom(1,
| size = 100, prob = 0.7). Note that you only specify the
| probability of 'success' (heads) and NOT the probability
| of 'failure' (tails). Try it now.

> rbinom(1, size = 100, prob = 0.7)
[1] 70

| You nailed it! Good job!

  |===========================                       |  55%
| Equivalently, if we want to see all of the 0s and 1s, we
| can request 100 observations, each of size 1, with
| success probability of 0.7. Give it a try, assigning the
| result to a new variable called flips2.

> flips2 <-rbinom(1, size = 100, prob = 0.7)

| Keep trying! Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and
| assign the result to flips2.

> flips2
[1] 62

| You're close...I can feel it! Try it again. Or, type
| info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and
| assign the result to flips2.

> rbinom(1, size = 100, prob = 0.7)
[1] 74

| That's not the answer I was looking for, but try again.
| Or, type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and
| assign the result to flips2.

> rbinom(100, size = 1, prob = 0.7)
  [1] 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 0 1 0 1
 [28] 0 1 1 1 1 0 0 0 1 0 1 0 1 1 1 0 1 0 0 0 0 1 0 1 1 1 1
 [55] 1 1 1 0 1 1 1 1 1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 1 1
 [82] 0 0 1 0 1 1 0 0 0 1 1 1 1 0 1 0 0 0 1

| That's not exactly what I'm looking for. Try again. Or,
| type info() for more options.

| Call rbinom() with n = 100, size = 1, and prob = 0.7 and
| assign the result to flips2.

> flips2 <-rbinom(100, size = 1, prob = 0.7)

| You're the best!

  |=============================                     |  58%
| View the contents of flips2.

> flips2
  [1] 0 1 0 1 1 0 1 1 1 1 1 0 0 0 1 1 1 0 1 1 0 1 1 1 1 1 1
 [28] 1 1 1 1 0 0 0 0 1 1 0 1 1 1 1 1 0 1 1 0 1 1 1 1 1 0 1
 [55] 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 0 1 0 1 1 0 1 0 0
 [82] 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1

| Perseverance, that's the answer.

  |==============================                    |  61%
| Now use sum() to count the number of 1s (heads) in
| flips2. It should be close to 70!

> sum(flips2)
[1] 72

| Excellent work!

  |================================                  |  64%
| Similar to rbinom(), we can use R to simulate random
| numbers from many other probability distributions. Pull
| up the documentation for rnorm() now.

> rnorm(flips2)
  [1] -0.994193629  0.849250386  0.805702289 -0.467600936
  [5]  0.848420314  0.986769864  0.575620289  2.024842045
  [9] -1.962353191 -1.164920931 -1.376519214  0.167679934
 [13]  1.584629079  1.677888953  0.488296698  0.878673263
 [17] -0.144874874  0.468971760  0.376235477 -0.761040275
 [21] -0.293294934 -0.134841264  1.393845816 -1.036988690
 [25] -2.114335148  0.768278218 -0.816160621 -0.436106923
 [29]  0.904705031 -0.763086265 -0.341066980  1.502424534
 [33]  0.528307712  0.542191355 -0.136673356 -1.136733853
 [37] -1.496627154 -0.223385644  2.001719228  0.221703816
 [41]  0.164372909  0.332623609 -0.385207999 -1.398754027
 [45]  2.675740796 -0.423686089 -0.298601512 -1.792341727
 [49] -0.248008225 -0.247303918 -0.255510379 -1.786938100
 [53]  1.784662816  1.763586348  0.689600222 -1.100740644
 [57]  0.714509357 -0.246470317 -0.319786166  1.362644293
 [61] -1.227882590 -0.511219233 -0.731194999  0.019752007
 [65] -1.572863915 -0.703333270  0.715932089  0.465214906
 [69] -0.973902306  0.559217730 -2.432639745 -0.340484927
 [73]  0.713033195 -0.659037386 -0.036402623 -1.593286302
 [77]  0.847792797 -1.850388849 -0.323650632 -0.255248113
 [81]  0.060921227 -0.823491629  1.829730485 -1.429916216
 [85]  0.254137143 -2.939773695  0.002415809  0.509665571
 [89] -1.084720001  0.704832977  0.330976350  0.976327473
 [93] -0.843339880 -0.970579905 -1.771531349 -0.322470342
 [97] -1.338800742  0.688156028  0.071280652  2.189752359

| Nice try, but that's not exactly what I was hoping for.
| Try again. Or, type info() for more options.

| Type ?rnorm to view its help file.

> ?rnorm

| Keep working like that and you'll get there!

  |=================================                 |  67%
| The standard normal distribution has mean 0 and standard
| deviation 1. As you can see under the 'Usage' section in
| the documentation, the default values for the 'mean' and
| 'sd' arguments to rnorm() are 0 and 1, respectively.
| Thus, rnorm(10) will generate 10 random numbers from a
| standard normal distribution. Give it a try.

> rnorm(10)
 [1]  1.18528925 -0.21975520 -0.05667276  0.40656451
 [5] -1.30942995 -0.70669129  1.03389167  1.97276097
 [9]  0.68752507  0.73824255

| Nice work!

  |===================================               |  70%
| Now do the same, except with a mean of 100 and a standard
| deviation of 25.

> rnorm(10, mean = 100, sd = 25)
 [1] 104.21225 120.57977  94.47764  74.26521  99.72686
 [6]  69.37522  35.09722 129.22806  72.82728  54.34792

| That's correct!

  |====================================              |  73%
| Finally, what if we want to simulate 100 *groups* of
| random numbers, each containing 5 values generated from a
| Poisson distribution with mean 10? Let's start with one
| group of 5 numbers, then I'll show you how to repeat the
| operation 100 times in a convenient and compact way.

...

  |======================================            |  76%
| Generate 5 random values from a Poisson distribution with
| mean 10. Check out the documentation for rpois() if you
| need help.

> rpois()
Error in rpois() : argument "n" is missing, with no default
> rpois(5,10)
[1] 18  5  4  4 13

| You got it!

  |=======================================           |  79%
| Now use replicate(100, rpois(5, 10)) to perform this
| operation 100 times. Store the result in a new variable
| called my_pois.

> replicate(100, rpois(5, 10))
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]    5   10    6   10   14   12    5    8   12    10
[2,]    8    7    3    7    8   13    4    8   11    11
[3,]    9   17   13    3    7    7   10    8    8     9
[4,]    9   10   14    5    6   15    3   10    7     9
[5,]   15    6   16   12    5   12   11   10   10     7
     [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19]
[1,]     7    14     5     7    10    12    11    16    10
[2,]     7    11    10    10    10     9     6    11    10
[3,]     9    10     9    12     9    10     7     4    12
[4,]    14     9    15     7    11     5     6     9     7
[5,]     7     7     8    12    14    17    13     2     7
     [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]    12     6    11    11    10     6    16    12    13
[2,]     8     8    10     8    15    14    10    11    11
[3,]     7    11     9    14     5     7    11    10     8
[4,]     7    13    10    12    11    11    10     7     9
[5,]     9     9    13     9    12    11     8     9    10
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
[1,]    13    15     9     5    10     9    10    16     8
[2,]     6     9    18    10    18    12     6    10    11
[3,]     8    15     9    12    10    15    10    10     9
[4,]     5     4    22     5    10     9    10    10    12
[5,]     9    10     9     8     2    11    11     6     7
     [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46]
[1,]     8    12     6     9     8    10     9    10     6
[2,]     2    12     9     9     6    15     3     6    11
[3,]     4     8    10    15    13    12    13     9     7
[4,]     7    15    15     8     8     8     6     8    10
[5,]    12     9    19    12    12     9    11     6    12
     [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,]    11     9    12     9     6    13     9    13     9
[2,]    11     4    12     7    14    12    14    12    11
[3,]     5     4     7     5     7     8    13     8    12
[4,]     6     7     7    15    14     7    11     8    10
[5,]     8     8    14    11     3    10     8     9     4
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64]
[1,]    19    13     7     8    16     6     2     4    11
[2,]     6    12     9    12     7     9     9    11     8
[3,]    11    12    16    16    11    10     9    10    14
[4,]     9    13     9    11    11     8    12    10    10
[5,]    15    13     9     9    13    17    14     8    14
     [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
[1,]     8     7    11     9    11     5    15    11     7
[2,]     9     8     8     4     7    17     6    14     8
[3,]    12    12     6     8     9    14     5    14     6
[4,]    13     7     8     4     9     7     9    10    15
[5,]     6    12     4     6     5    10     8     7     6
     [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82]
[1,]     6     5    10     9     7     6    11     9    13
[2,]    10     6    13    11    12    10     8     9     7
[3,]    11    16    14    13     8     6    14     9     9
[4,]    10    10    11    21    11     7    10    13     5
[5,]     9     9    13     9     7     5    10     5     7
     [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91]
[1,]    13    12     9    13     9    16     9    12    12
[2,]     7    15    17     8    13     7     8    13     9
[3,]    13    13     7    13     8    14    10    10     7
[4,]     7    10    13    10     7    10     9    13     9
[5,]    13     7     6    10     7     7    12     9    13
     [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]    12    12    10     7    10    10    11     6      7
[2,]    13    12    13     6     8    13    15    10     13
[3,]     7     7     9    11    12    14    16     8     12
[4,]     6    10    10    11     8    14    14     9     10
[5,]     6     6     6     6     9    13     9     9     16

| Try again. Getting it right on the first try is boring
| anyway! Or, type info() for more options.

| my_pois <- replicate(100, rpois(5, 10)) will repeat the
| operation 100 times and store the result.

> my_pois <- replicate(100, rpois(5, 10))

| That's a job well done!

  |=========================================         |  82%
| Take a look at the contents of my_pois.

> my_pois
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
[1,]   12    7   16   12   11   12   10   11    6     9
[2,]   11    7   14    8    4    6    8   11    4    13
[3,]   13   10   10    7   11   17   12   14    7    12
[4,]    7    6    7   15    4   11    5    9    9     9
[5,]    9    6   11   13    7   13    9   15    7     9
     [,11] [,12] [,13] [,14] [,15] [,16] [,17] [,18] [,19]
[1,]     7     7    15    10    12     6     9     7    12
[2,]     9    10     9     5     6    11    18    12    10
[3,]    12     5     8    11    17    12    14    14     9
[4,]    14     9    16     8    12     4     9     8     7
[5,]     8    15     5     8    15     7    10    13     8
     [,20] [,21] [,22] [,23] [,24] [,25] [,26] [,27] [,28]
[1,]    10    14    14     8    12    13     8     5     9
[2,]     9     9    10    12    14     7    10     4     8
[3,]    13     9     9    13     8    11    12    10    12
[4,]    16    17    11     8     8     8    14    14    18
[5,]    11     8     6    10     9     2    12    11     7
     [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]
[1,]    17    13     7    10    11    14    11    11     8
[2,]    18    13    10     9     4    13    10     9     7
[3,]    12     9    16    12    10    14     6     9    16
[4,]     9    10     7    10     9    11     9     9    12
[5,]    16    13     6    11     9    10    15    14     4
     [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46]
[1,]    11     7     8    15     9     7    12    17     9
[2,]     9     7     9    12    10    10    11     8    10
[3,]     7    16    13    13    11    11     5     7    10
[4,]     9    15    10    15     8    10    10    12    10
[5,]     6     7    10     9    10    14    10    10    10
     [,47] [,48] [,49] [,50] [,51] [,52] [,53] [,54] [,55]
[1,]     9    11    12     6     6    11     7    12     7
[2,]    12    10    11    15    14    12    10     6    14
[3,]    15     8     6     6    11    10    15     8     9
[4,]     9    12     5    14    10     9    13    13     9
[5,]    10    15    10     8    15     7     8     7     8
     [,56] [,57] [,58] [,59] [,60] [,61] [,62] [,63] [,64]
[1,]     6     9    12    13    12    17     6    14    14
[2,]     6     9     8    12    11    12     8     6     8
[3,]    16    13    13    17     9     9     9    10    14
[4,]     5    14     7     8     6    14     7     4    14
[5,]    11     7     9    10    10    10     8     4    12
     [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73]
[1,]    15    14    10     7     7    13     8     9    13
[2,]    13     7     8     9     9    11     7     7     8
[3,]    11     6    13    12    10     8     7     6    12
[4,]     3    11    13     8     7    10     7    11    11
[5,]     8    12     9    12     9    11    12    10     6
     [,74] [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82]
[1,]     9    10    11     6     8     8    14    13    10
[2,]     9    11     6    10     9     8     9    13     6
[3,]     9     6     9     7     8     7    10     9    10
[4,]    10    10     3    16     9    15     8     5    13
[5,]    12     9    10    10     9    14    10    10     8
     [,83] [,84] [,85] [,86] [,87] [,88] [,89] [,90] [,91]
[1,]    15    10    15     9    10     8    12     8    13
[2,]    16    14    10    12    10     7     9    15     9
[3,]    12    12    12    13    13     6     8    12    12
[4,]    12    10    11    11    10    12     9     7    13
[5,]    10    11    12     7    11     7     7     6    16
     [,92] [,93] [,94] [,95] [,96] [,97] [,98] [,99] [,100]
[1,]     9    14    10     9     8    15    11    11     14
[2,]    10    12     9     6     8     7     9    10     13
[3,]    13    10     7    10    15    15    12     9      9
[4,]    10     4     8    11    11    10    13    10      9
[5,]    10    12     9     5    10    12    14    11     12

| You are quite good my friend!

  |==========================================        |  85%
| replicate() created a matrix, each column of which
| contains 5 random numbers generated from a Poisson
| distribution with mean 10. Now we can find the mean of
| each column in my_pois using the colMeans() function.
| Store the result in a variable called cm.

> colMeans(my_pois)
  [1] 10.4  7.2 11.6 11.0  7.4 11.8  8.8 12.0  6.6 10.4 10.0
 [12]  9.2 10.6  8.4 12.4  8.0 12.0 10.8  9.2 11.8 11.4 10.0
 [23] 10.2 10.2  8.2 11.2  8.8 10.8 14.4 11.6  9.2 10.4  8.6
 [34] 12.4 10.2 10.4  9.4  8.4 10.4 10.0 12.8  9.6 10.4  9.6
 [45] 10.8  9.8 11.0 11.2  8.8  9.8 11.2  9.8 10.6  9.2  9.4
 [56]  8.8 10.4  9.8 12.0  9.6 12.4  7.6  7.6 12.4 10.0 10.0
 [67] 10.6  9.6  8.4 10.6  8.2  8.6 10.0  9.8  9.2  7.8  9.8
 [78]  8.6 10.4 10.2 10.0  9.4 13.0 11.4 12.0 10.4 10.8  8.0
 [89]  9.0  9.6 12.6 10.4 10.4  8.6  8.2 10.4 11.8 11.8 10.2
[100] 11.4

| That's not the answer I was looking for, but try again.
| Or, type info() for more options.

| Use cm <- colMeans(my_pois) to create a vector of column
| means, storing the result in cm.

> cm <- colMeans(my_pois)

| Nice work!

  |============================================      |  88%
| And let's take a look at the distribution of our column
| means by plotting a histogram with hist(cm).

> hist(cm)
Error in plot.new() : figure margins too large
> hist(cm)
Error in plot.new() : figure margins too large
> plot.new()
Error in plot.new() : figure margins too large
> hist(cm)
Error in plot.new() : figure margins too large
> hist(cm)
Error in plot.new() : figure margins too large
> dev.off()
null device 
          1 

| Keep trying! Or, type info() for more options.

| hist(cm) will give you a histogram of column means.

> hist(cm)
Error in plot.new() : figure margins too large
> hist(cm)

| Your dedication is inspiring!

  |=============================================     |  91%
| Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a
| lesson for another day!

...

  |===============================================   |  94%
| All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()),
| gamma (rgamma()), .... Well, you see the pattern.

...

  |================================================  |  97%
| Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to
| explore these and other functions further on your own.

...

  |==================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? charanahu605@gmail.com
What is your assignment token? hqCltUHdLveKxFJj
Grade submission succeeded!

| Nice work!

| You've reached the end of this lesson! Returning to the
| main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 1

| Please choose a lesson, or type 0 to return to course
| menu.

 1: Basic Building Blocks      2: Workspace and Files     
 3: Sequences of Numbers       4: Vectors                 
 5: Missing Values             6: Subsetting Vectors      
 7: Matrices and Data Frames   8: Logic                   
 9: Functions                 10: lapply and sapply       
11: vapply and tapply         12: Looking at Data         
13: Simulation                14: Dates and Times         
15: Base Graphics             

Selection: 15

  |                                                  |   0%

| One of the greatest strengths of R, relative to other
| programming languages, is the ease with which we can
| create publication-quality graphics. In this lesson,
| you'll learn about base graphics in R.

...

  |=                                                 |   2%
| We do not cover the more advanced portions of graphics in
| R in this lesson. These include lattice, ggplot2 and
| ggvis.

...

  |==                                                |   4%
| There is a school of thought that this approach is
| backwards, that we should teach ggplot2 first. See
| http://varianceexplained.org/r/teach_ggplot2_to_beginners/
| for an outline of this view.

...

  |===                                               |   7%
| Load the included data frame cars with data(cars).

warning messages from top-level task callback 'mini'
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
2: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
3: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
> data(cars)

| Keep up the great work!

  |====                                              |   9%
| To fix ideas, we will work with simple data frames. Our
| main goal is to introduce various plotting functions and
| their arguments. All the output would look more
| interesting with larger, more complex data sets.

...

  |=====                                             |  11%
| Pull up the help page for cars.

> ?cars

| You're the best!

  |=======                                           |  13%
| As you can see in the help page, the cars data set has
| only two variables: speed and stopping distance. Note
| that the data is from the 1920s.

...

  |========                                          |  15%
| Run head() on the cars data.

> head(cars)
  speed dist
1     4    2
2     4   10
3     7    4
4     7   22
5     8   16
6     9   10

| You are doing so well!

  |=========                                         |  17%
| Before plotting, it is always a good idea to get a sense
| of the data. Key R commands for doing so include, dim(),
| names(), head(), tail() and summary().

...

  |==========                                        |  20%
| Run the plot() command on the cars data frame.

> plot(cars)
Error in plot.new() : figure margins too large
> plot(cars)

| Your dedication is inspiring!

  |===========                                       |  22%
| As always, R tries very hard to give you something sensible given the information that you have provided to it. First, R
| notes that the data frame you have given it has just two columns, so it assumes that you want to plot one column versus the
| other.

...

  |============                                      |  24%
| Second, since we do not provide labels for either axis, R uses the names of the columns. Third, it creates axis tick marks
| at nice round numbers and labels them accordingly. Fourth, it uses the other defaults supplied in plot().

...

  |=============                                     |  26%
| We will now spend some time exploring plot, but many of the topics covered here will apply to most other R graphics
| functions. Note that 'plot' is short for scatterplot.

...

  |==============                                    |  28%
| Look up the help page for plot().

> plot()
Error in xy.coords(x, y, xlabel, ylabel, log) : 
  argument "x" is missing, with no default
In addition: Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
2: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
3: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
> plot(cars)
Error in plot.new() : figure margins too large
> plot(cars)

| Give it another try. Or, type info() for more options.

| Type ?plot or help(plot) to view a help page for plot().

> ?plot
Warning messages:
1: In doTryCatch(return(expr), name, parentenv, handler) :
  display list redraw incomplete
2: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state
3: In doTryCatch(return(expr), name, parentenv, handler) :
  invalid graphics state

| You got it!

  |===============                                   |  30%
| The help page for plot() highlights the different
| arguments that the function can take. The two most
| important are x and y, the variables that will be
| plotted. For the next set of questions, include the
| argument names in your answers. That is, do not type
| plot(cars$speed, cars$dist), although that will work.
| Instead, use plot(x = cars$speed, y = cars$dist).

...

  |================                                  |  33%
| Use plot() command to show speed on the x-axis and dist
| on the y-axis from the cars data frame. Use the form of
| the plot command in which vectors are explicitly passed
| in as arguments for x and y.

> plot(x = cars$speed, y = cars$dist)
Error in plot.new() : figure margins too large
> plot(x = cars$speed, y = cars$dist)

| Your dedication is inspiring!

  |=================                                 |  35%
| Note that this produces a slightly different answer than plot(cars). In this case, R is not sure what you want to use as the
| labels on the axes, so it just uses the arguments which you pass in, data frame name and dollar signs included.

...

  |==================                                |  37%
| Note that there are other ways to call the plot command, i.e., using the "formula" interface. For example, we get a similar
| plot to the above with plot(dist ~ speed, cars). However, we will wait till later in the lesson before using the formula
| interface.

...

  |====================                              |  39%
| Use plot() command to show dist on the x-axis and speed on the y-axis from the cars data frame. This is the opposite of what
| we did above.

> plot(dist ~ speed, cars)

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type plot(x = cars$dist, y = cars$speed) to create the plot.

> plot(x = cars$dist, y = cars$speed)

| You are quite good my friend!

  |=====================                             |  41%
| It probably makes more sense for speed to go on the x-axis since stopping distance is a function of speed more than the
| other way around. So, for the rest of the questions in this portion of the lesson, always assign the arguments accordingly.

...

  |======================                            |  43%
| In fact, you can assume that the answers to the next few questions are all of the form plot(x = cars$speed, y = cars$dist,
| ...) but with various arguments used in place of the ...

...

  |=======================                           |  46%
| Recreate the plot with the label of the x-axis set to "Speed".

> plot(x = cars$dist, y = cars$speed)

| Try again. Getting it right on the first try is boring anyway! Or, type info() for more options.

| Type plot(x = cars$speed, y = cars$dist, xlab = "Speed") to create the plot.

> plot(x = cars$speed, y = cars$dist, xlab = "Speed")

| Excellent work!

  |========================                          |  48%
| Recreate the plot with the label of the y-axis set to "Stopping Distance".

> plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")

| That's correct!

  |=========================                         |  50%
| Recreate the plot with "Speed" and "Stopping Distance" as axis labels.

> plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")

| Keep up the great work!

  |==========================                        |  52%
| The reason that plots(cars) worked at the beginning of the lesson was that R was smart enough to know that the first element
| (i.e., the first column) in cars should be assigned to the x argument and the second element to the y argument. To save on
| typing, the next set of answers will all be of the form, plot(cars, ...) with various arguments added.

...

  |===========================                       |  54%
| For each question, we will only want one additional argument at a time. Of course, you can pass in more than one argument
| when doing a real project.

...

  |============================                      |  57%
| Plot cars with a main title of "My Plot". Note that the argument for the main title is "main" not "title".

> plot(cars, main = "My Plot")

| You are doing so well!

  |=============================                     |  59%
| Plot cars with a sub title of "My Plot Subtitle".

> plot(cars, sub = "My Plot Subtitle")

| You got it right!

  |==============================                    |  61%
| The plot help page (?plot) only covers a small number of the many arguments that can be passed in to plot() and to other
| graphical functions. To begin to explore the many other options, look at ?par. Let's look at some of the more commonly used
| ones. Continue using plot(cars, ...) as the base answer to these questions.

...

  |================================                  |  63%
| Plot cars so that the plotted points are colored red. (Use col = 2 to achieve this effect.)

> plot(cars, col = 2)

| That's the answer I was looking for.

  |=================================                 |  65%
| Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15) to achieve this effect.)

> xlim = c(10,15)

| You're close...I can feel it! Try it again. Or, type info() for more options.

| Type plot(cars, xlim = c(10, 15)) to create the plot.

> plot(cars, xlim = c(10, 15))

| Great job!

  |==================================                |  67%
| You can also change the shape of the symbols in the plot. The help page for points (?points) provides the details.

...

  |===================================               |  70%
| Plot cars using triangles.  (Use pch = 2 to achieve this effect.)

> plot(cars, pch = 2)

| All that practice is paying off!

  |====================================              |  72%
| Arguments like "col" and "pch" may not seem very intuitive. And that is because they aren't! So, many/most people use more
| modern packages, like ggplot2, for creating their graphics in R.

...

  |=====================================             |  74%
| It is, however, useful to have an introduction to base graphics because many of the idioms in lattice and ggplot2 are
| modeled on them.

...

  |======================================            |  76%
| Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

...

  |=======================================           |  78%
| Load the mtcars data frame.

> data(mtcars)

| You are quite good my friend!

  |========================================          |  80%
| Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type
| play(). This temporarily suspends the lesson (without losing the work you have already done) and allows you to issue
| commands like dim(mtcars) and head(mtcars). Once you are done examining the data, just type nxt() and the lesson will pick
| up where it left off.

...

  |=========================================         |  83%
| Look up the help page for boxplot().

> ?boxplot

| Excellent job!

  |==========================================        |  85%
| Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire
| data frame. This is what the "data" argument in boxplot() allows.

...

  |===========================================       |  87%
| boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which
| indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the
| relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.

...

  |=============================================     |  89%
| Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.

> boxplot(formula = mpg ~ cyl, data = mtcars)

| That's a job well done!

  |==============================================    |  91%
| The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we
| explored with plot() above to add axis labels, titles and so on.

...

  |===============================================   |  93%
| When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is
| best used by just passing in a single vector.

...

  |================================================  |  96%
| Use hist() with the vector mtcars$mpg to create a histogram.

> hist(mtcars$mpg)

| You are doing so well!

  |================================================= |  98%
| In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2
| package. If you want to explore other elements of base graphics, then this web page
| (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.

...

  |==================================================| 100%
| Would you like to receive credit for completing this course on Coursera.org?

1: Yes
2: No

Selection: 1
What is your email address? charanahu605@gmail.com
What is your assignment token? Q1jReA5JHubp2B8Q
Grade submission succeeded!

| You're the best!

| You've reached the end of this lesson! Returning to the
| main menu...

| Please choose a course, or type 0 to exit swirl.

1: R Programming
2: Take me to the swirl course repository!

Selection: 
